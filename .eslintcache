[{"C:\\Users\\anisa\\Project_React\\test_technique\\src\\index.js":"1","C:\\Users\\anisa\\Project_React\\test_technique\\src\\App.js":"2","C:\\Users\\anisa\\Project_React\\test_technique\\src\\reportWebVitals.js":"3","C:\\Users\\anisa\\Project_React\\test_technique\\src\\serviceWorker.js":"4","C:\\Users\\anisa\\Project_React\\test_technique\\src\\config\\fbConfig.js":"5","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\chartService.js":"6","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\commissionService.js":"7","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\productService.js":"8","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\BrandDetails.js":"9","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\BrandPicture.js":"10","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Deposits.js":"11","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Chart.js":"12","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Orders.js":"13","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Mois.js":"14","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Title.js":"15","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\brandService.js":"16"},{"size":450,"mtime":1609107031553,"results":"17","hashOfConfig":"18"},{"size":521,"mtime":1609106823477,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1608650235427,"results":"20","hashOfConfig":"18"},{"size":5086,"mtime":499162500000,"results":"21","hashOfConfig":"18"},{"size":542,"mtime":1608830630426,"results":"22","hashOfConfig":"18"},{"size":1930,"mtime":1609118956589,"results":"23","hashOfConfig":"18"},{"size":3302,"mtime":1609118951959,"results":"24","hashOfConfig":"18"},{"size":2952,"mtime":1609118942780,"results":"25","hashOfConfig":"18"},{"size":5572,"mtime":1609113952922,"results":"26","hashOfConfig":"18"},{"size":727,"mtime":1609112596717,"results":"27","hashOfConfig":"18"},{"size":783,"mtime":1609113856444,"results":"28","hashOfConfig":"18"},{"size":1628,"mtime":1609109185085,"results":"29","hashOfConfig":"18"},{"size":2684,"mtime":1609124507306,"results":"30","hashOfConfig":"18"},{"size":1705,"mtime":1609114105870,"results":"31","hashOfConfig":"18"},{"size":541,"mtime":1609113641264,"results":"32","hashOfConfig":"18"},{"size":4301,"mtime":1609118996077,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"hxd3ke",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"C:\\Users\\anisa\\Project_React\\test_technique\\src\\index.js",[],["74","75"],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\App.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\reportWebVitals.js",[],["76","77"],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\serviceWorker.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\config\\fbConfig.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\chartService.js",["78","79","80"],"import firebase from \"../config/fbConfig\";\r\n\r\nexport const ChartService = {\r\n  /**\r\n   * convert time from timestamps to month and date(number)\r\n   * @param {*} purchaseMonth\r\n   */\r\n  timeConverter: (purchaseMonth) => {\r\n    var a = new Date(purchaseMonth * 1000);\r\n    var months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    return [date, month];\r\n  },\r\n  /**\r\n   * get sales number for first 10 days of month then second 10 days (from 11 to 20) then for last 10 days of month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getChartSalesNumber: (id, month) => {\r\n    return new Promise((resolve, reject) => {\r\n      const chartRef = firebase.database().ref(\"conversions/purchase\");\r\n      let first = 0;\r\n      let medium = 0;\r\n      let last = 0;\r\n      chartRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childData = childSnapshot.val();\r\n          const chartDay = ChartService.timeConverter(childData.createdAt);\r\n          if (\r\n            childData.offerId == id &&\r\n            chartDay[1] === month &&\r\n            chartDay[0] >= 1 &&\r\n            chartDay[0] <= 10\r\n          ) {\r\n            first++;\r\n          } else if (\r\n            childData.offerId == id &&\r\n            chartDay[1] === month &&\r\n            chartDay[0] >= 11 &&\r\n            chartDay[0] <= 20\r\n          ) {\r\n            medium++;\r\n          } else if (\r\n            childData.offerId == id &&\r\n            chartDay[1] === month &&\r\n            chartDay[0] >= 21 &&\r\n            chartDay[0] <= 31\r\n          ) {\r\n            last++;\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          resolve([first, medium, last]);\r\n        }, 4000);\r\n      });\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\commissionService.js",["81","82"],"import firebase from \"../config/fbConfig\";\r\n\r\nexport const commissionService = {\r\n  /**\r\n   * convert time from timestamps to month\r\n   * @param {*} purchaseMonth\r\n   */\r\n  timeConverter: (purchaseMonth) => {\r\n    var a = new Date(purchaseMonth * 1000);\r\n    var months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    var month = months[a.getMonth()];\r\n    var time = month;\r\n    return time;\r\n  },\r\n  /**\r\n   * get All keys for influencers per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getInfluencerKeyFromBrands: (id, month) => {\r\n    const influencerKeyRef = firebase.database().ref(\"conversions/purchase\");\r\n    let keyInfluencers = [];\r\n    influencerKeyRef.once(\"value\", (snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        var childData = childSnapshot.val();\r\n        const salesMonth = commissionService.timeConverter(childData.createdAt);\r\n        if (childData.offerId == id && salesMonth === month) {\r\n          keyInfluencers.push(childData.influencer);\r\n        }\r\n      });\r\n    });\r\n    return keyInfluencers;\r\n  },\r\n  /**\r\n   * get Commission amount for every influencer per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getCommisionInfluencer: (id, month) => {\r\n    return new Promise((resolve, reject) => {\r\n      let influencerKey = commissionService.getInfluencerKeyFromBrands(\r\n        id,\r\n        month\r\n      );\r\n      let keyInfluencer = [];\r\n      let commission = 0;\r\n      let commissionNumber = [];\r\n\r\n      const influencerRef = firebase.database().ref(\"Influencers\");\r\n      influencerRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childKey = childSnapshot.key;\r\n\r\n          influencerKey.forEach((key) => {\r\n            if (key === childKey) {\r\n              keyInfluencer.push(childKey);\r\n            }\r\n          });\r\n        });\r\n\r\n        const uniqueKeyInfluencer = keyInfluencer.filter(onlyUnique);\r\n\r\n        // function pour éliminé les redondances dans un tableau\r\n        function onlyUnique(value, index, self) {\r\n          return self.indexOf(value) === index;\r\n        }\r\n\r\n        //Récupérer la commission de chaque influenceur\r\n        const commissionRef = firebase.database().ref(\"conversions/purchase\");\r\n        uniqueKeyInfluencer.forEach(async (key) => {\r\n          commissionRef.once(\"value\", (snapshot) => {\r\n            snapshot.forEach((childSnapshot) => {\r\n              var childData = childSnapshot.val();\r\n              const commissionMonth = commissionService.timeConverter(\r\n                childData.createdAt\r\n              );\r\n              if (\r\n                key === childData.influencer &&\r\n                childData.offerId == id &&\r\n                month === commissionMonth\r\n              ) {\r\n                commission = commission + parseFloat(childData.commission);\r\n              }\r\n            });\r\n            commissionNumber.unshift(commission);\r\n            commission = 0;\r\n          });\r\n        });\r\n\r\n        //récupérer le nombre d'article par influencer\r\n        setTimeout(() => {\r\n          resolve(commissionNumber);\r\n        }, 4000);\r\n      });\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\productService.js",["83","84"],"import firebase from \"../config/fbConfig\";\r\n\r\nexport const productService = {\r\n  /**\r\n   * convert time from timestamps to month\r\n   * @param {*} purchaseMonth\r\n   */\r\n  timeConverter: (purchaseMonth) => {\r\n    var a = new Date(purchaseMonth * 1000);\r\n    var months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    var month = months[a.getMonth()];\r\n    var time = month;\r\n    return time;\r\n  },\r\n  /**\r\n   * get All keys for influencers per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getInfluencerKeyFromBrands: (id, month) => {\r\n    const influencerKeyRef = firebase.database().ref(\"conversions/purchase\");\r\n    let keyInfluencers = [];\r\n    influencerKeyRef.once(\"value\", (snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        var childData = childSnapshot.val();\r\n        const salesMonth = productService.timeConverter(childData.createdAt);\r\n        if (childData.offerId == id && salesMonth === month) {\r\n          keyInfluencers.push(childData.influencer);\r\n        }\r\n      });\r\n    });\r\n    return keyInfluencers;\r\n  },\r\n  /**\r\n   * get number of product added per influencer\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getProductInfluencer: (id, month) => {\r\n    return new Promise((resolve, reject) => {\r\n      let influencerKey = productService.getInfluencerKeyFromBrands(id, month);\r\n      let keyInfluencer = [];\r\n      let product = 0;\r\n      let productNumber = [];\r\n\r\n      const influencerRef = firebase.database().ref(\"Influencers\");\r\n      influencerRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childKey = childSnapshot.key;\r\n\r\n          influencerKey.forEach((key) => {\r\n            if (key === childKey) {\r\n              keyInfluencer.push(childKey);\r\n            }\r\n          });\r\n        });\r\n\r\n        const uniqueKeyInfluencer = keyInfluencer.filter(onlyUnique);\r\n\r\n        // function pour éliminé les redondances dans un tableau\r\n        function onlyUnique(value, index, self) {\r\n          return self.indexOf(value) === index;\r\n        }\r\n\r\n        //Récupérer la commission de chaque influenceur\r\n\r\n        const articleRef = firebase.database().ref(\"articles\");\r\n        uniqueKeyInfluencer.forEach(async (key) => {\r\n          articleRef.once(\"value\", (snapshot) => {\r\n            snapshot.forEach((childSnapshot) => {\r\n              var childData = childSnapshot.val();\r\n              if (key === childData.uid && childData.offerId == id) {\r\n                product = product + 1;\r\n              }\r\n            });\r\n            productNumber.unshift(product);\r\n            product = 0;\r\n          });\r\n        });\r\n\r\n        //récupérer le nombre d'article par influencer\r\n        setTimeout(() => {\r\n          resolve(productNumber);\r\n        }, 4000);\r\n      });\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\BrandDetails.js",["85"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { brandService } from \"../../services/brandService\";\r\nimport { ChartService } from \"../../services/chartService\";\r\nimport { commissionService } from \"../../services/commissionService\";\r\nimport { productService } from \"../../services/productService\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Deposits from \"./Deposits\";\r\nimport Orders from \"./Orders\";\r\nimport BrandPicture from \"./BrandPicture\";\r\nimport Mois from \"./Mois\";\r\nimport Chart from \"./Chart\";\r\nimport image from \"../assets/images/network.png\";\r\n\r\nconst BrandDetails = () => {\r\n  /**\r\n   * Init const\r\n   */\r\n  const classes = useStyles();\r\n  const { id } = useParams();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  /**\r\n   * Init States\r\n   */\r\n  const [data, setData] = useState([]);\r\n  const [salesNumber, setSalesNumber] = useState([]);\r\n  const [influencers, setInfluencers] = useState([]);\r\n  const [commission, setCommission] = useState([]);\r\n  const [product, setProduct] = useState([]);\r\n  const [month, setMonth] = useState(\"\");\r\n  const [chartSales, setChartSales] = useState([]);\r\n  /**\r\n   * Event handleChange\r\n   * @param {*} event\r\n   */\r\n  const handleChange = async (event) => {\r\n    setMonth(event.target.value);\r\n\r\n    brandService\r\n      .getSalesNumber(id, event.target.value)\r\n      .then((res) => setSalesNumber(res));\r\n\r\n    brandService.getInfluencer(id, event.target.value).then(async (res) => {\r\n      setInfluencers(res);\r\n    });\r\n\r\n    ChartService.getChartSalesNumber(id, event.target.value).then((res) => {\r\n      setChartSales(res);\r\n    });\r\n\r\n    commissionService\r\n      .getCommisionInfluencer(id, event.target.value)\r\n      .then(async (res) => {\r\n        setCommission(res);\r\n      });\r\n    productService\r\n      .getProductInfluencer(id, event.target.value)\r\n      .then(async (res) => {\r\n        setProduct(res);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * use Effect\r\n   */\r\n  useEffect(() => {\r\n    brandService.getBrandPhoto(id).then((response) => setData(response));\r\n  }, [id]);\r\n\r\n  /**\r\n   * Return Content\r\n   */\r\n\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n      style={{\r\n        background: \"linear-gradient(to right, #ffffcc 0%, #99ccff 100%)\",\r\n      }}\r\n    >\r\n      <CssBaseline />\r\n\r\n      <main className={classes.content}>\r\n        <img className={classes.logo} src={`${image}`} />\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={5} lg={4}>\r\n              <BrandPicture data={data} />\r\n            </Grid>\r\n            {/* Recent Deposits */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Deposits salesNumber={salesNumber} />\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={5}>\r\n              <Paper\r\n                className={fixedHeightPaper}\r\n                style={{ overflowY: \"hidden\" }}\r\n              >\r\n                <Chart chartSales={chartSales} month={month} />\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <h2\r\n                style={{\r\n                  marginLeft: \"89px\",\r\n                  paddingTop: \"15px\",\r\n                  color: \"#0277bd\",\r\n                }}\r\n              >\r\n                {data[1] ? data[1].toUpperCase() : null}\r\n              </h2>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Mois handleChange={handleChange} month={month} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Orders\r\n                  influencers={influencers}\r\n                  commission={commission}\r\n                  product={product}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  logo: {\r\n    marginTop: \"30px\",\r\n    marginLeft: \"30px\",\r\n  },\r\n}));\r\nconst drawerWidth = 240;\r\n\r\nexport default BrandDetails;\r\n","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\BrandPicture.js",["86"],"import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Title from \"./Title\";\r\n\r\nexport const BrandPicture = (props) => {\r\n  /**\r\n   * Init props\r\n   */\r\n  const { data } = props;\r\n\r\n  /**\r\n   * Init Const\r\n   */\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Return Content\r\n   */\r\n  return (\r\n    <div>\r\n      <Avatar\r\n        className={classes.large}\r\n        variant=\"square\"\r\n        alt=\"\"\r\n        src={`${data[0]}`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  large: {\r\n    width: theme.spacing(30),\r\n    height: theme.spacing(28),\r\n    marginLeft: 90,\r\n  },\r\n}));\r\n\r\nexport default BrandPicture;\r\n","C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Deposits.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Chart.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Orders.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Mois.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\components\\pages\\Title.js",[],"C:\\Users\\anisa\\Project_React\\test_technique\\src\\services\\brandService.js",["87","88","89"],"import firebase from \"../config/fbConfig\";\r\n\r\nexport const brandService = {\r\n  /**\r\n   * get Brand picture and name\r\n   * @param {*} id\r\n   */\r\n  getBrandPhoto: (id) => {\r\n    return new Promise((resolve, reject) => {\r\n      const imageRef = firebase.database().ref(\"brands\");\r\n      let picture = \"\";\r\n      let name = \"\";\r\n      imageRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childData = childSnapshot.val();\r\n          if (childData.offerId == id) {\r\n            picture = childData.pic;\r\n            name = childData.name;\r\n\r\n            resolve([picture, name]);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  },\r\n  /**\r\n   * convert time from timestamps to month\r\n   * @param {*} purchaseMonth\r\n   */\r\n  timeConverter: (purchaseMonth) => {\r\n    var a = new Date(purchaseMonth * 1000);\r\n    var months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    var month = months[a.getMonth()];\r\n    var time = month;\r\n    return time;\r\n  },\r\n  /**\r\n   * get sales number and sales amount for brand per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getSalesNumber: (id, month) => {\r\n    return new Promise((resolve, reject) => {\r\n      const salesRef = firebase.database().ref(\"conversions/purchase\");\r\n      let sales = 0;\r\n      let amount = 0;\r\n\r\n      salesRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childData = childSnapshot.val();\r\n          const salesMonth = brandService.timeConverter(childData.createdAt);\r\n          if (childData.offerId == id && salesMonth === month) {\r\n            sales = sales + 1;\r\n            amount = amount + childData.amount;\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          resolve([sales, amount]);\r\n        }, 4000);\r\n      });\r\n    });\r\n  },\r\n  /**\r\n   * get All keys for influencers per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getInfluencerKeyFromBrands: (id, month) => {\r\n    const influencerKeyRef = firebase.database().ref(\"conversions/purchase\");\r\n    let keyInfluencers = [];\r\n    influencerKeyRef.once(\"value\", (snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        var childData = childSnapshot.val();\r\n        const salesMonth = brandService.timeConverter(childData.createdAt);\r\n        if (childData.offerId == id && salesMonth === month) {\r\n          keyInfluencers.push(childData.influencer);\r\n        }\r\n      });\r\n    });\r\n    return keyInfluencers;\r\n  },\r\n  /**\r\n   * get influencers details (picture, name, email) and sales number for influencer per month\r\n   * @param {*} id\r\n   * @param {*} month\r\n   */\r\n  getInfluencer: async (id, month) => {\r\n    return new Promise((resolve, reject) => {\r\n      let number = 0;\r\n      let influencerKey = brandService.getInfluencerKeyFromBrands(id, month);\r\n      let influencers = [];\r\n      let keyInfluencer = [];\r\n      let salesNumber = [];\r\n\r\n      const influencerRef = firebase.database().ref(\"Influencers\");\r\n      influencerRef.once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          var childKey = childSnapshot.key;\r\n          var childData = childSnapshot.val();\r\n          influencerKey.forEach((key) => {\r\n            if (key === childKey) {\r\n              influencers.push(childData.Profil);\r\n              keyInfluencer.push(childKey);\r\n            }\r\n          });\r\n        });\r\n\r\n        const uniqueInfluencer = influencers.filter(onlyUnique);\r\n        const uniqueKeyInfluencer = keyInfluencer.filter(onlyUnique);\r\n\r\n        // function pour éliminé les redondances dans un tableau\r\n        function onlyUnique(value, index, self) {\r\n          return self.indexOf(value) === index;\r\n        }\r\n\r\n        //sales number de chaque influenceur\r\n        uniqueKeyInfluencer.forEach(async (key) => {\r\n          keyInfluencer.forEach((key2) => {\r\n            if (key2 === key) {\r\n              number = number + 1;\r\n            }\r\n          });\r\n          salesNumber.push(number);\r\n\r\n          number = 0;\r\n        });\r\n\r\n        setTimeout(() => {\r\n          resolve([uniqueInfluencer, salesNumber]);\r\n        }, 4000);\r\n      });\r\n    });\r\n  },\r\n};\r\n",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":44,"column":31,"nodeType":"98","messageId":"99","endLine":44,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":51,"column":31,"nodeType":"98","messageId":"99","endLine":51,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":58,"column":31,"nodeType":"98","messageId":"99","endLine":58,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":40,"column":31,"nodeType":"98","messageId":"99","endLine":40,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":92,"column":35,"nodeType":"98","messageId":"99","endLine":92,"endColumn":37},{"ruleId":"96","severity":1,"message":"97","line":40,"column":31,"nodeType":"98","messageId":"99","endLine":40,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":85,"column":62,"nodeType":"98","messageId":"99","endLine":85,"endColumn":64},{"ruleId":"100","severity":1,"message":"101","line":89,"column":9,"nodeType":"102","endLine":89,"endColumn":58},{"ruleId":"103","severity":1,"message":"104","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":16,"column":33,"nodeType":"98","messageId":"99","endLine":16,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":65,"column":33,"nodeType":"98","messageId":"99","endLine":65,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":88,"column":31,"nodeType":"98","messageId":"99","endLine":88,"endColumn":33},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],["107"],["108"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Title' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]